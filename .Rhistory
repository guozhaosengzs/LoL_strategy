library(tidyverse)
library(caTools)
library(tidyverse)
library(caTools)
library(rpart)
library(rpart.plot)
data <- read_csv('https://raw.githubusercontent.com/guozhaosengzs/LoL_strategy/master/high_diamond_ranked_10min.csv')
# Train : Test = 0.75 : 0.25
set.seed(12345)
data$spl <- sample.split(seq_len(nrow(data)), SplitRatio = 0.75)
data.train <- subset(data, spl == TRUE)
data.test <- subset(data, spl == FALSE)
# First blood took place every game before 10min
x <- data.train$blueFirstBlood - data.train$redFirstBlood
unique(x)
# Remake a less confusing data set
colnames(data.train)
data.train.lite <- data.train %>%
select(blueWins, blueFirstBlood, blueGoldDiff, blueExperienceDiff)
data.train.lite$blueDragonsDiff <- data.train$blueDragons - data.train$redDragons
data.train.lite$killParticipationDiff <- data.train$blueAssists - data.train$redAssists
data.train.lite$visionScore <-
data.train$blueWardsPlaced + data.train$blueWardsDestroyed - data.train$redWardsPlaced - data.train$redWardsDestroyed
data.train.lite$blueKillDiff <- data.train$blueKills -  data.train$blueDeaths
data.train.lite$blueFirstBlood = as.factor(data.train.lite$blueFirstBlood)
data.train.lite$blueDragonsDiff = as.factor(data.train.lite$blueDragonsDiff)
# First try at a logistic regression model
model1 <- glm(data = data.train.lite, blueWins ~., family='binomial')
summary(model1)
plot(data.train.lite$blueGoldDiff, data.train.lite$blueWins)
plot(data.train.lite$blueExperienceDiff, data.train.lite$blueWins)
mt <- table(data.train.lite$blueDragonsDiff, data.train.lite$blueWins)
barplot(prop.table(mt, margin = 2))
# What contributed to more gold?
data.train$KillDiff <- data.train$blueKills -  data.train$blueDeaths
data.train$TowerDiff <- data.train$blueTowersDestroyed -  data.train$redTowersDestroyed
data.train$minionDiff <- data.train$blueTotalMinionsKilled-  data.train$redTotalMinionsKilled
data.train$jungleDiff <- data.train$blueTotalJungleMinionsKilled - data.train$redTotalJungleMinionsKilled
model2 <- lm(data = data.train, blueTotalGold ~ KillDiff + TowerDiff + minionDiff + jungleDiff)
summary(model2)
# Classification
data.train.tree <- data.train
View(data.train.tree)
data.train.tree <- data.train.tree[c(blueWins, blueWardDestroyed)]
data.train.tree <- data.train.tree[c("blueWins", "blueWardDestroyed")]
colnames(data.train.tree)
x <- colnames(data.train.tree)
x
x[1:5]
x[1:5,42]
x[1,5,42]
x[c(1:5,43)]
data.train.tree$goldDiff <- - data.train.tree$redGoldDiff
data.train.tree$ExperienceDiff <- - data.train.tree$redExperienceDiff
data <- read_csv('https://raw.githubusercontent.com/guozhaosengzs/LoL_strategy/master/high_diamond_ranked_10min.csv')
# Train : Test = 0.75 : 0.25
set.seed(12345)
data$spl <- sample.split(seq_len(nrow(data)), SplitRatio = 0.75)
data.train <- subset(data, spl == TRUE)
data.test <- subset(data, spl == FALSE)
# First blood took place every game before 10min
x <- data.train$blueFirstBlood - data.train$redFirstBlood
unique(x)
# Remake a less confusing data set
colnames(data.train)
data.train.lite <- data.train %>%
select(blueWins, blueFirstBlood, blueGoldDiff, blueExperienceDiff)
data.train.lite$blueDragonsDiff <- data.train$blueDragons - data.train$redDragons
data.train.lite$killParticipationDiff <- data.train$blueAssists - data.train$redAssists
data.train.lite$visionScore <-
data.train$blueWardsPlaced + data.train$blueWardsDestroyed - data.train$redWardsPlaced - data.train$redWardsDestroyed
data.train.lite$blueKillDiff <- data.train$blueKills -  data.train$blueDeaths
data.train.lite$blueFirstBlood = as.factor(data.train.lite$blueFirstBlood)
data.train.lite$blueDragonsDiff = as.factor(data.train.lite$blueDragonsDiff)
# First try at a logistic regression model
model1 <- glm(data = data.train.lite, blueWins ~., family='binomial')
summary(model1)
plot(data.train.lite$blueGoldDiff, data.train.lite$blueWins)
plot(data.train.lite$blueExperienceDiff, data.train.lite$blueWins)
mt <- table(data.train.lite$blueDragonsDiff, data.train.lite$blueWins)
barplot(prop.table(mt, margin = 2))
# What contributed to more gold?
data.train$KillDiff <- data.train$blueKills -  data.train$blueDeaths
data.train$TowerDiff <- data.train$blueTowersDestroyed -  data.train$redTowersDestroyed
data.train$MinionDiff <- data.train$blueTotalMinionsKilled-  data.train$redTotalMinionsKilled
data.train$JungleDiff <- data.train$blueTotalJungleMinionsKilled - data.train$redTotalJungleMinionsKilled
model2 <- lm(data = data.train, blueTotalGold ~ KillDiff + TowerDiff + minionDiff + jungleDiff)
summary(model2)
#PCA
model.pca <- prcomp(data.train[,-c(1,2)])
summary(model.pca)
PCscores <- predict(model.pca)
PCscores <- data.frame(PCscores)
PCscores$group <- data.train$blueWins
ggplot(data = PCscores) +
geom_point(mapping = aes(x = PC1,
y = PC2,
col = group), alpha = 0.5, size = 0.65)
# Classification
data.train.tree <- data.train
data.train.tree$GoldDiff <- - data.train.tree$redGoldDiff
data.train.tree$ExperienceDiff <- - data.train.tree$redExperienceDiff
vars <- colnames(data.train.tree)
vars
data.train.tree$blueWardsPlacedDiff <- - data.train.tree$blueWardsPlaced - data.train.tree$redWardsPlaced
data.train.tree$blueWardsPlacedDiff <- data.train.tree$blueWardsPlaced - data.train.tree$redWardsPlaced
data.train.tree$blueWardsDestroyedDiff <- data.train.tree$blueWardsDestroyed - data.train.tree$redWardsDestroyed
data.train.tree$firstBlood <- data.train.tree$blueFirstBlood - data.train.tree$redFirstBlood
library(tidyverse)
library(caTools)
library(rpart)
library(rpart.plot)
data <- read_csv('https://raw.githubusercontent.com/guozhaosengzs/LoL_strategy/master/high_diamond_ranked_10min.csv')
# Train : Test = 0.75 : 0.25
set.seed(12345)
data$spl <- sample.split(seq_len(nrow(data)), SplitRatio = 0.75)
data.train <- subset(data, spl == TRUE)
data.test <- subset(data, spl == FALSE)
# First blood took place every game before 10min
x <- data.train$blueFirstBlood - data.train$redFirstBlood
unique(x)
# Remake a less confusing data set
colnames(data.train)
data.train.lite <- data.train %>%
select(blueWins, blueFirstBlood, blueGoldDiff, blueExperienceDiff)
data.train.lite$blueDragonsDiff <- data.train$blueDragons - data.train$redDragons
data.train.lite$killParticipationDiff <- data.train$blueAssists - data.train$redAssists
data.train.lite$visionScore <-
data.train$blueWardsPlaced + data.train$blueWardsDestroyed - data.train$redWardsPlaced - data.train$redWardsDestroyed
data.train.lite$blueKillDiff <- data.train$blueKills -  data.train$blueDeaths
data.train.lite$blueFirstBlood = as.factor(data.train.lite$blueFirstBlood)
data.train.lite$blueDragonsDiff = as.factor(data.train.lite$blueDragonsDiff)
# First try at a logistic regression model
model1 <- glm(data = data.train.lite, blueWins ~., family='binomial')
summary(model1)
plot(data.train.lite$blueGoldDiff, data.train.lite$blueWins)
plot(data.train.lite$blueExperienceDiff, data.train.lite$blueWins)
mt <- table(data.train.lite$blueDragonsDiff, data.train.lite$blueWins)
barplot(prop.table(mt, margin = 2))
# What contributed to more gold?
data.train$blueKillDiff <- data.train$blueKills -  data.train$redKills
data.train$blueTowerDiff <- data.train$blueTowersDestroyed -  data.train$redTowersDestroyed
data.train$blueMinionDiff <- data.train$blueTotalMinionsKilled-  data.train$redTotalMinionsKilled
data.train$blueJungleDiff <- data.train$blueTotalJungleMinionsKilled - data.train$redTotalJungleMinionsKilled
model2 <- lm(data = data.train, blueTotalGold ~ KillDiff + TowerDiff + minionDiff + jungleDiff)
summary(model2)
#PCA
model.pca <- prcomp(data.train[,-c(1,2)])
summary(model.pca)
PCscores <- predict(model.pca)
PCscores <- data.frame(PCscores)
PCscores$group <- data.train$blueWins
ggplot(data = PCscores) +
geom_point(mapping = aes(x = PC1,
y = PC2,
col = group), alpha = 0.5, size = 0.65)
# Classification
data.train.tree <- data.train
data.train.tree$blueWardsPlacedDiff <- data.train.tree$blueWardsPlaced - data.train.tree$redWardsPlaced
data.train.tree$blueWardsDestroyedDiff <- data.train.tree$blueWardsDestroyed - data.train.tree$redWardsDestroyed
data.train.tree$firstBlood <- data.train.tree$blueFirstBlood - data.train.tree$redFirstBlood
data.train.tree$blueEliteMonstersDiff <- data.train.tree$blueEliteMonsters - data.train.tree$redEliteMonsters
data.train.tree$blueDragonsDiff <- data.train.tree$blueDragons - data.train.tree$redDragons
data.train.tree$blueHeraldsDiff <- data.train.tree$blueHeralds - data.train.tree$redHeralds
vars <- colnames(data.train.tree)
vars
vars[c(2, 42:51)]
selected_vars <- vars[c(2, 18:19, 42:51)]
selected_vars
tree_allv = rpart(data = data.train.tree, blueWins ~ ., method = 'class')
rpart.plot(tree_allv, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree)
View(trained_tree)
data.train.tree <- data.train.tree[selected_vars]
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree)
rpart.plot(trained_tree, extra = 101)
trained_tree[["terms"]]
data.train.tree$blueWins = as.factor(data.train.tree$blueWins)
data.train.tree$firstBlood = as.factor(data.train.tree$firstBlood)
data.train.tree$blueDragonsDiff = as.factor(data.train.tree$blueDragonsDiff)
data.train.tree$blueHeraldsDiff = as.factor(data.train.tree$blueHeraldsDiff)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree)
trained_tree[["terms"]][[3]]
trained_tree[["terms"]]
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=2, minbucket=1, cp=0.001))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=10, minbucket=1, cp=0.01))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=10, minbucket=1, cp=0.001))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=10, minbucket=1, cp=0.05))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=10, minbucket=1, cp=0.005))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(minsplit=1, minbucket=1, cp=0.005))
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.005))
rpart.plot(trained_tree, extra = 101)
summary(trained_tree)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree)
summary(trained_tree)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.003))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.002))
summary(trained_tree)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.001))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.002))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train.tree, control=rpart.control(cp=0.001))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
plotcp(trained_tree)
plotcp(trained_tree)
# Data Cleaning
data.cleaned <- data
View(data.cleaned)
View(data.train)
data.cleaned <- data
data.cleaned$blueKillDiff <- data.cleaned$blueKills -  data.cleaned$redKills
data.cleaned$blueTowerDiff <- data.cleaned$blueTowersDestroyed -  data.cleaned$redTowersDestroyed
data.cleaned$blueMinionDiff <- data.cleaned$blueTotalMinionsKilled-  data.cleaned$redTotalMinionsKilled
data.cleaned$blueJungleDiff <- data.cleaned$blueTotalJungleMinionsKilled - data.cleaned$redTotalJungleMinionsKilled
data.cleaned$blueWardsPlacedDiff <- data.cleaned$blueWardsPlaced - data.cleaned$redWardsPlaced
data.cleaned$blueWardsDestroyedDiff <- data.cleaned$blueWardsDestroyed - data.cleaned$redWardsDestroyed
data.cleaned$firstBlood <- data.cleaned$blueFirstBlood - data.cleaned$redFirstBlood
data.cleaned$blueEliteMonstersDiff <- data.cleaned$blueEliteMonsters - data.cleaned$redEliteMonsters
data.cleaned$blueDragonsDiff <- data.cleaned$blueDragons - data.cleaned$redDragons
data.cleaned$blueHeraldsDiff <- data.cleaned$blueHeralds - data.cleaned$redHeralds
vars <- colnames(data.cleaned)
selected_vars <- vars[c(2, 18:19, 42:51)]
data.cleaned <- data.cleaned[selected_vars]
data.cleaned$blueWins = as.factor(data.cleaned$blueWins)
data.cleaned$firstBlood = as.factor(data.cleaned$firstBlood)
data.cleaned$blueDragonsDiff = as.factor(data.cleaned$blueDragonsDiff)
data.cleaned$blueHeraldsDiff = as.factor(data.cleaned$blueHeraldsDiff)
View(data.cleaned)
set.seed(12345)
data.cleaned$spl <- sample.split(seq_len(nrow(data.cleaned)), SplitRatio = 0.75)
data.train <- subset(data.cleaned, spl == TRUE)
data.test <- subset(data.cleaned, spl == FALSE)
View(data.train)
View(data.test)
data.train <- subset(data.cleaned, spl == TRUE)[,-14]
data.test <- subset(data.cleaned, spl == FALSE)[,-14]
View(data.test)
View(data.train)
# Classification
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train, control=rpart.control(cp=0.001))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
plotcp(trained_tree)
# Classification
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train, control=rpart.control(cp=0.002))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
plotcp(trained_tree)
View(trained_tree)
trained_tree[["terms"]]
predicted_status_tree = predict(trained_tree, type ='class')
table(actual = data.train$blueWins , predicted = predicted_status_tree)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train, control=rpart.control(cp=0.001))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
plotcp(trained_tree)
predicted_status_tree = predict(trained_tree, type ='class')
table(actual = data.train$blueWins , predicted = predicted_status_tree)
trained_tree <- rpart(blueWins ~ ., method = 'class', data = data.train, control=rpart.control(cp=0.002))
summary(trained_tree)
rpart.plot(trained_tree, extra = 101)
plotcp(trained_tree)
predicted_status_tree = predict(trained_tree, type ='class')
table(actual = data.train$blueWins , predicted = predicted_status_tree)
trained_tree_test= predict(trained_tree, type='class', newdata = data.test)
table(actual = data.test$blueWins, predicted = trained_tree_test)
